//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
plugins {
	id "fabric-loom" version "1.0.+"
	id "io.github.juuxel.loom-quiltflower" version "1.+" // Quiltflower, a better decompiler
	id "io.github.p03w.machete" version "1.+" // automatic jar compressing on build
	id "org.ajoberstar.grgit" version "4.1.1"
	id "maven-publish"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
group = project.maven_group

String buildNumber = System.getenv("GITHUB_RUN_NUMBER")
version = project.mod_version + (buildNumber != null ? "-${buildNumber}" : "")

repositories {
	maven { url = "https://storage.googleapis.com/devan-maven/" }
	maven { url = "https://maven.quiltmc.org/repository/release" }
	maven { url = "https://api.modrinth.com/maven" }
	maven { url = "https://maven.shedaniel.me/" }
	maven { url = "https://maven.terraformersmc.com/" }
	maven { url = "https://aperlambda.github.io/maven" }
	maven { url = "https://ladysnake.jfrog.io/artifactory/mods" }
	maven { url = "https://maven.kotlindiscord.com/repository/terraformers/" }
	maven { url = "https://cursemaven.com" }
	maven { url =  "https://jitpack.io" }
	maven { url = "https://maven.parchmentmc.org" }
}

dependencies {
	minecraft("com.mojang:minecraft:${project.minecraft_version}")
	mappings(loom.layered {
		it.mappings("org.quiltmc:quilt-mappings:${project.minecraft_version}+build.${project.qm_version}:intermediary-v2")
		it.parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip")
		it.officialMojangMappings { nameSyntheticMembers = false }
	})
	modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")

	// deps
	modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
	modImplementation(include("maven.modrinth:midnightlib:${project.midnightlib_version}"))

	// compat
	modCompileOnly("dev.emi:trinkets:${project.trinkets_version}") { exclude(group: "com.terraformersmc") }
	modCompileOnly("maven.modrinth:automobility:${project.automobility_version}")

	// dev
	modLocalRuntime("dev.emi:trinkets:${project.trinkets_version}") { exclude(group: "com.terraformersmc") }

	modLocalRuntime("maven.modrinth:automobility:${project.automobility_version}")
	modLocalRuntime("net.devtech:arrp:${project.arrp_version}")
	modLocalRuntime("maven.modrinth:jsonem:${project.jsonem_version}")

	modLocalRuntime("com.terraformersmc:modmenu:${project.mod_menu_version}")
	modLocalRuntime("maven.modrinth:lazydfu:0.1.3")
	modLocalRuntime("maven.modrinth:here-be-no-dragons:1.0.0")
}

task buildOrPublish {
	group = "build"
	String mavenUser = System.getenv().MAVEN_USER
	if (mavenUser != null && !mavenUser.isEmpty()) {
		dependsOn(tasks.getByName("publish"))
		println("prepared for publish")
	} else {
		dependsOn(tasks.getByName("build"))
		println("prepared for build")
	}
}

processResources {
	exclude("assets/bingbingwahoo/icon_compressed.png")

	Map<String, String> properties = new HashMap<>()
	properties.put("version", project.version)
	properties.put("loader_version", project.loader_version)
	properties.put("fabric_version", project.fabric_version)
	properties.put("minecraft_version", project.minecraft_version)
	properties.put("java_version", sourceCompatibility)
	properties.put("midnightlib_version", project.midnightlib_version)

	properties.forEach((k, v) -> inputs.property(k, v))

	filesMatching("fabric.mod.json") {
		expand properties
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = Integer.parseInt(sourceCompatibility)
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
		maven {
			url = "https://mvn.devos.one/${System.getenv().PUBLISH_SUFFIX}/"
			credentials {
				username = System.getenv().MAVEN_USER
				password = System.getenv().MAVEN_PASS
			}
			authentication {
				basic(BasicAuthentication)
			}
		}
	}
}
