plugins {
	id 'fabric-loom' version '0.8-SNAPSHOT'
	id 'maven-publish'
	id 'io.github.juuxel.loom-quiltflower' version '1.3.0'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

String getTerraformersMCMaven() { // thanks LambdAurora
	def terraformersUrl = 'https://maven.terraformersmc.com/'
	if (pingUrl(terraformersUrl))
		return terraformersUrl
	else
		return 'https://maven.kotlindiscord.com/repository/terraformers/'
}

boolean pingUrl(String address) {
	try {
		def conn = (HttpURLConnection) new URL(address).openConnection()
		int responseCode = conn.getResponseCode()
		return (200 <= responseCode && responseCode <= 399)
	} catch (IOException ignored) {
		return false
	}
}

repositories {
	maven { url "https://maven.shedaniel.me/" }
	maven { url getTerraformersMCMaven() }
	maven { url "https://aperlambda.github.io/maven" }
	maven { url "https://ladysnake.jfrog.io/artifactory/mods" }
	maven { url "https://maven.kotlindiscord.com/repository/terraformers/" }
//	maven { url "https://maven.gegy.dev" }"
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

//	modApi("dev.lambdaurora:lambdacontrols:${project.lambdacontrols_version}")
	modImplementation "dev.emi:trinkets:${trinkets_version}"
	modImplementation("com.terraformersmc:modmenu:2.0.2")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	it.options.release = 16
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
